---
title: "Take-Home Exercise 2"
author: "Leonard Lee"
format:
  html:
    code-fold: true
    code-summary: "Show me the good stuff"
execute:
  warning: false
date: "18 May 2023"
date-modified: "`r Sys.Date()`"
---

# 1 Loading the Packages

```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts, jsonlite, patchwork, ggrepel, network)


```

# 2 Importing the Data

::: {.cushbox .cushicon}
Apart from the main dataset containing over 5.46 million links, there are a total of 12 Fish Bundles, for which we will visualise and compare to the MC2 data by matching them for source and target columns. We will first import the datasets.
:::

::: panel-tabset
### 2.1 Main Dataset

```{r}
MC2 <- fromJSON("data/mc2_challenge_graph.json")

```

### MC2 Overview

```{r}
glimpse(MC2)
```

### 2.2 Fish Bundles

```{r}

carp <- fromJSON("data/carp.json")
catfish <- fromJSON("data/catfish.json")
c_mac <- fromJSON("data/chub_mackerel.json")
cod <- fromJSON("data/cod2.json")
herring <- fromJSON("data/herring.json")
lichen <- fromJSON("data/lichen.json")
mac <- fromJSON("data/mackerel.json")
pol <- fromJSON("data/pollock.json")
salmon <- fromJSON("data/salmon.json")
sal_wgl <- fromJSON("data/salmon_wgl.json")
shark <- fromJSON("data/shark.json")
tuna <- fromJSON("data/tuna.json")

```
:::

# 3 Data Preparation

::: {.cushbox .cushicon}
Apart from reorganising the nodes and edges using **select()**, we will also clean the dataset by removing duplicate rows, missing values in source/target columns, and renaming them.
:::

## 3.1 Reorganise Dataset

```{r}
MC2_nodes <- as_tibble(MC2$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

MC2_edges <- as_tibble(MC2$links) %>%
  select(source, target, valueofgoods_omu, valueofgoodsusd, weightkg, hscode, arrivaldate)

```

## 3.2 Remove duplicate rows

```{r}
MC2_edges <- MC2_edges %>% distinct()
MC2_nodes <- MC2_nodes %>% distinct()

```

## 3.2 Rename Columns

```{r}

# rename columns
MC2_edges <- MC2_edges %>%
  rename('Value_OMU' = 'valueofgoods_omu', 
         'Value_USD' = 'valueofgoodsusd', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')

```

## 3.3 Remove Rows with NA in Source/Target Columns

As we are examining links between **source** and **target** columns, we will first remove rows with missing values in these columns as they will not be contributing to the analysis.

```{r}
MC2_edges <- MC2_edges[complete.cases(MC2_edges[, c("source", "target")]), ]

colSums(is.na(MC2_edges))

```

::: {.bubblebox .bubbleicon}
While there are missing (NA) fields in **Value_OMU** and **Value_USD**, the key columns being examined (**source** and **target**) do not possess any missing values.
:::

# 4 Data Exploration and Comparison

::: {.cushbox .cushicon}
To determine which bundles of predictive network models are reliable, we will first visualise the respective network models, before comparing them with the same links extracted from MC2. This is done by extracting in MC2 rows that match the source & target columns in the bundles. This is accompanied with a **Jaccard Similiarity Coefficient** calculation to confirm the visual similarities and deteremine how reliable the bundles are.

Jaccard similarity coeifficients are a measure of similarity between two sets. They are commonly used in data science and information retrieval to compare the similarity of two sets of items.

The Jaccard similarity coefficient, also known as the Jaccard index, is defined as the size of the intersection of two sets divided by the size of their union. It is a value between 0 and 1, where 0 indicates no similarity and 1 indicates complete similarity.
:::

## 4.1 Carp

```{r}
carp_nodes <- as_tibble(carp$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

carp_edges <- as_tibble(carp$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
carp_edges <- carp_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
  
carp_edges_aggregated <- carp_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```

::: panel-tabset
### Summary

```{r, warning=FALSE}

carp_nodes_extract <- carp_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(carp_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

carp_graph <- tbl_graph(nodes = carp_nodes_extract,
                       edges = carp_edges_aggregated,
                       directed = TRUE)

carp_graph

```

### Visualisation

```{r}
nodes_dfcarp <- carp_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label)

edges_dfcarp <- carp_graph %>%
  activate(edges) %>%
  as.tibble()

viscarp_graph <- visNetwork(nodes = nodes_dfcarp, edges = edges_dfcarp) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)


viscarp_graph

```

### Matching

```{r, warning=FALSE}

matched_carp <- carp_edges_aggregated[
  carp_edges_aggregated$source %in% MC2_edges$source &
  carp_edges_aggregated$target %in% MC2_edges$target,
]


mcarp_nodes_extract <- matched_carp %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(carp_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

mcarp_graph <- tbl_graph(nodes = mcarp_nodes_extract,
                       edges = matched_carp,
                       directed = TRUE)


nodes_dfmcarp <- mcarp_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label)

edges_dfmcarp <- mcarp_graph %>%
  activate(edges) %>%
  as.tibble()

vismcarp_graph <- visNetwork(nodes = nodes_dfmcarp, edges = edges_dfmcarp) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)


vismcarp_graph

```

### Jaccard Similarity Score

```{r}
# Calculate the number of common edges
common_edgescarp <- intersect(E(carp_graph), E(mcarp_graph))

# Calculate the Jaccard similarity coefficient
jaccard_similaritycarp <- length(common_edgescarp) / (length(E(carp_graph)) + length(E(mcarp_graph)) - length(common_edgescarp))

# Print the Jaccard similarity coefficient
print(jaccard_similaritycarp)

```
:::

## 4.2 Chub Mackerel

```{r}
cmac_nodes <- as_tibble(c_mac$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

cmac_edges <- as_tibble(c_mac$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
cmac_edges <- cmac_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
  
cmac_edges_aggregated <- cmac_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```

::: panel-tabset
### Summary

```{r}
cmac_nodes_extract <- cmac_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(cmac_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

cmac_graph <- tbl_graph(nodes = cmac_nodes_extract,
                       edges = cmac_edges_aggregated,
                       directed = TRUE)

cmac_graph
```

### Visualisation

```{r, warning= FALSE}

cmac_nodes_extract <- cmac_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(cmac_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

cmac_nodes <- cmac_nodes_extract %>%
  mutate(id = as.character(id))  # Convert id column to character type

cmac_edges <- cmac_edges_aggregated %>%
  mutate(from = as.character(source),  # Convert source and target columns to character type
         to = as.character(target))

viscmac_graph <- visNetwork(nodes = cmac_nodes, edges = cmac_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

viscmac_graph



```

### Matching

```{r, warning=FALSE}

matched_cmac <- cmac_edges_aggregated[
  cmac_edges_aggregated$source %in% MC2_edges$source &
  cmac_edges_aggregated$target %in% MC2_edges$target,
]

mcmac_nodes_extract <- matched_cmac %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(cmac_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

mcmac_graph <- tbl_graph(nodes = mcmac_nodes_extract,
                       edges = matched_cmac,
                       directed = TRUE)



mcmac_nodes <- mcmac_nodes_extract %>%
  mutate(id = as.character(id))  # Convert id column to character type

mcmac_edges <- matched_cmac %>%
  mutate(from = as.character(source),  # Convert source and target columns to character type
         to = as.character(target))

vismcmac_graph <- visNetwork(nodes = mcmac_nodes, edges = mcmac_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vismcmac_graph

```

### Jaccard Similarity Score

```{r}
# Calculate the number of common edges
common_edgescmac <- intersect(E(cmac_graph), E(mcmac_graph))

# Calculate the Jaccard similarity coefficient
jaccard_similaritycmac <- length(common_edgescmac) / (length(E(cmac_graph)) + length(E(mcmac_graph)) - length(common_edgescmac))

# Print the Jaccard similarity coefficient
print(jaccard_similaritycmac)

```
:::

## 4.3 Cod

```{r}
cod_nodes <- as_tibble(cod$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

cod_edges <- as_tibble(cod$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
cod_edges <- cod_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
 
cod_edges_aggregated <- cod_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```

::: panel-tabset
### Summary

```{r}
cod_nodes_extract <- cod_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(cod_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

cod_graph <- tbl_graph(nodes = cod_nodes_extract,
                       edges = cod_edges_aggregated,
                       directed = TRUE)

cod_graph
```

### Visualisation

```{r, warning= FALSE}
nodes_dfcod <- cod_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label)

edges_dfcod <- cod_graph %>%
  activate(edges) %>%
  as.tibble()

viscod_graph <- visNetwork(nodes = nodes_dfcod, edges = edges_dfcod) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)


viscod_graph

```

### Matching

```{r, warning=FALSE}

matched_cod <- cod_edges_aggregated[
  cod_edges_aggregated$source %in% MC2_edges$source &
  cod_edges_aggregated$target %in% MC2_edges$target,
]

# Remove rows with invalid vertex indices
matched_cod <- matched_cod[!is.na(matched_cod$source) & !is.na(matched_cod$target),]

mcod_nodes_extract <- matched_cod %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(matched_cod %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

mcod_graph <- tbl_graph(nodes = mcod_nodes_extract,
                        edges = matched_cod,
                        directed = TRUE)

nodes_dfmcod <- mcod_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id = as.character(row_number())) %>%
  select(id, label)

edges_dfmcod <- mcod_graph %>%
  activate(edges) %>%
  as_tibble()

vismcod_graph <- visNetwork(nodes = nodes_dfmcod, edges = edges_dfmcod) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vismcod_graph


```

### Jaccard Similarity Score

```{r}
# Calculate the number of common edges
common_edgescod <- intersect(E(cod_graph), E(mcod_graph))

# Calculate the Jaccard similarity coefficient
jaccard_similaritycod <- length(common_edgescod) / (length(E(cod_graph)) + length(E(mcod_graph)) - length(common_edgescod))

# Print the Jaccard similarity coefficient
print(jaccard_similaritycod)

```
:::

## 4.4 Catfish

```{r}
catfish_nodes <- as_tibble(catfish$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

catfish_edges <- as_tibble(catfish$links) %>%
  select(source, target, valueofgoods_omu, hscode, arrivaldate)

# rename columns
catfish_edges <- catfish_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')

catfish_edges_aggregated <- catfish_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE)) %>%
  ungroup()

```

::: panel-tabset
### Summary

```{r}
catfish_nodes_extract <- catfish_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(catfish_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

catfish_graph <- tbl_graph(nodes = catfish_nodes_extract,
                       edges = catfish_edges_aggregated,
                       directed = TRUE)

catfish_graph
```

### Visualisation

```{r, warning= FALSE}

nodes_dfcatfish <- catfish_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label)

edges_dfcatfish <- catfish_graph %>%
  activate(edges) %>%
  as.tibble()

viscatfish_graph <- visNetwork(nodes = nodes_dfcatfish, edges = edges_dfcatfish) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

viscatfish_graph

```

### Matching

```{r, warning=FALSE}



matched_catfish <- catfish_edges_aggregated[
  catfish_edges_aggregated$source %in% MC2_edges$source &
  catfish_edges_aggregated$target %in% MC2_edges$target,
]

# Remove rows with invalid vertex indices
matched_catfish <- matched_catfish[!is.na(matched_catfish$source) & !is.na(matched_catfish$target),]

mcatfish_nodes_extract <- matched_catfish %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(matched_catfish %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

mcatfish_graph <- tbl_graph(nodes = mcatfish_nodes_extract,
                            edges = matched_catfish,
                            directed = TRUE)

nodes_dfmcatfish <- mcatfish_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id = as.character(row_number())) %>%
  select(id, label)

edges_dfmcatfish <- mcatfish_graph %>%
  activate(edges) %>%
  as_tibble()

vismcatfish_graph <- visNetwork(nodes = nodes_dfmcatfish, edges = edges_dfmcatfish) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vismcatfish_graph



```

### Jaccard Similarity Score

```{r}
common_edges_catfish <- intersect(E(catfish_graph), E(mcatfish_graph))

# Calculate the Jaccard similarity coefficient
jaccard_similarity_catfish <- length(common_edges_catfish) / (length(E(catfish_graph)) + length(E(mcatfish_graph)) - length(common_edges_catfish))

# Print the Jaccard similarity coefficient
print(jaccard_similarity_catfish)


```
:::

## 4.5 Herring

```{r}
herring_nodes <- as_tibble(herring$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

herring_edges <- as_tibble(herring$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
herring_edges <- herring_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
  
herring_edges_aggregated <- herring_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```

::: panel-tabset
### Summary

```{r}
herring_nodes_extract <- herring_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(herring_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

herring_graph <- tbl_graph(nodes = herring_nodes_extract,
                       edges = herring_edges_aggregated,
                       directed = TRUE)

herring_graph


```

### Visualise Herring

```{r}

nodes_dfherring <- herring_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id = row_number()) %>%
  select(id, label)

edges_dfherring <- herring_graph %>%
  activate(edges) %>%
  as_tibble()

visherring_graph <- visNetwork(nodes = nodes_dfherring, edges = edges_dfherring) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

visherring_graph


```

### Matching Herring

```{r}


matched_herring <- herring_edges_aggregated[
  herring_edges_aggregated$source %in% MC2_edges$source &
  herring_edges_aggregated$target %in% MC2_edges$target,
]

# Remove rows with invalid vertex indices
matched_herring <- matched_herring[!is.na(matched_herring$source) & !is.na(matched_herring$target),]

mherring_nodes_extract <- matched_herring %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(matched_herring %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

mherring_graph <- tbl_graph(nodes = mherring_nodes_extract,
                            edges = matched_herring,
                            directed = TRUE)

nodes_dfmherring <- mherring_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id = as.character(row_number())) %>%
  select(id, label)

edges_dfmherring <- mherring_graph %>%
  activate(edges) %>%
  as_tibble()

vismherring_graph <- visNetwork(nodes = nodes_dfmherring, edges = edges_dfmherring) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vismherring_graph



```

### Jaccard Similarity Score

```{r}
common_edges_herring <- intersect(E(herring_graph), E(mherring_graph))

# Calculate the Jaccard similarity coefficient
jaccard_similarity_herring <- length(common_edges_herring) / (length(E(herring_graph)) + length(E(mherring_graph)) - length(common_edges_herring))

# Print the Jaccard similarity coefficient
print(jaccard_similarity_herring)



```
:::

## 4.6 Lichen

```{r}
lichen_node <- as_tibble(lichen$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

lichen_edges <- as_tibble(lichen$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
lichen_edges <- lichen_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
 
lichen_edges_aggregated <- lichen_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```

::: panel-tabset
### Summary

```{r}
lichen_nodes_extract <- lichen_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(lichen_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

lichen_graph <- tbl_graph(nodes = lichen_nodes_extract,
                       edges = lichen_edges_aggregated,
                       directed = TRUE)

lichen_graph


```

### Visualisation

```{r}


nodes_dflichen <- lichen_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label)

edges_dflichen <- lichen_graph %>%
  activate(edges) %>%
  as.tibble()

vislichen_graph <- visNetwork(nodes = nodes_dflichen, edges = edges_dflichen) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vislichen_graph


```

### Matching

```{r, warnin= FALSE}

matched_lichen <- lichen_edges_aggregated[
  lichen_edges_aggregated$source %in% MC2_edges$source &
  lichen_edges_aggregated$target %in% MC2_edges$target,
]

# Remove rows with invalid vertex indices
matched_lichen <- matched_lichen[!is.na(matched_lichen$source) & !is.na(matched_lichen$target),]

mlichen_nodes_extract <- matched_lichen %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(matched_lichen %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

mlichen_graph <- tbl_graph(nodes = mlichen_nodes_extract,
                            edges = matched_lichen,
                            directed = TRUE)

nodes_dfmlichen <- mlichen_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id = as.character(row_number())) %>%
  select(id, label)

edges_dfmlichen <- mlichen_graph %>%
  activate(edges) %>%
  as_tibble()

vismlichen_graph <- visNetwork(nodes = nodes_dfmlichen, edges = edges_dfmlichen) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vismlichen_graph




```

### Jaccard Similarity Score

```{r}
common_edges_lichen <- intersect(E(lichen_graph), E(mlichen_graph))

# Calculate the Jaccard similarity coefficient
jaccard_similarity_lichen <- length(common_edges_lichen) / (length(E(lichen_graph)) + length(E(mlichen_graph)) - length(common_edges_lichen))

# Print the Jaccard similarity coefficient
print(jaccard_similarity_lichen)




```
:::

## 4.7 Mackerel

```{r}
mac_nodes <- as_tibble(mac$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

mac_edges <- as_tibble(mac$links) %>%
  select(source, target, valueofgoods_omu, hscode, arrivaldate)

# rename columns
mac_edges <- mac_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
  
mackerel_edges_aggregated <- mac_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE)) %>%
  ungroup()

```

::: panel-tabset
### Summary

```{r}
mackerel_nodes_extract <- mackerel_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(mackerel_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

mackerel_graph <- tbl_graph(nodes = mackerel_nodes_extract,
                       edges = mackerel_edges_aggregated,
                       directed = TRUE)

mackerel_graph


```

### Visualiseation

```{r}


nodes_dfmackerel <- mackerel_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label)

edges_dfmackerel <- mackerel_graph %>%
  activate(edges) %>%
  as_tibble()

vismackerel_graph <- visNetwork(nodes = nodes_dfmackerel, edges = edges_dfmackerel) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vismackerel_graph




```

### Matching

```{r}

matched_mackerel <- mackerel_edges_aggregated[
  mackerel_edges_aggregated$source %in% MC2_edges$source &
  mackerel_edges_aggregated$target %in% MC2_edges$target,
]

# Remove rows with invalid vertex indices
matched_mackerel <- matched_mackerel[!is.na(matched_mackerel$source) & !is.na(matched_mackerel$target),]

mmackerel_nodes_extract <- matched_mackerel %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(matched_mackerel %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

mmackerel_graph <- tbl_graph(nodes = mmackerel_nodes_extract,
                            edges = matched_mackerel,
                            directed = TRUE)

nodes_dfmmackerel <- mmackerel_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id = as.character(row_number())) %>%
  select(id, label)

edges_dfmmackerel <- mmackerel_graph %>%
  activate(edges) %>%
  as_tibble()

vismmackerel_graph <- visNetwork(nodes = nodes_dfmmackerel, edges = edges_dfmmackerel) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vismmackerel_graph



```

### Jaccard Similarity Score

```{r}
common_edges_mackerel <- intersect(E(mackerel_graph), E(mmackerel_graph))

# Calculate the Jaccard similarity coefficient
jaccard_similarity_mackerel <- length(common_edges_mackerel) / (length(E(mackerel_graph)) + length(E(mmackerel_graph)) - length(common_edges_mackerel))

# Print the Jaccard similarity coefficient
print(jaccard_similarity_mackerel)




```
:::

## 4.8 Pollock

```{r}
pol_nodes <- as_tibble(pol$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

pol_edges <- as_tibble(pol$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
pol_edges <- pol_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')


pollock_edges_aggregated <- pol_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```

::: panel-tabset
### Summary

```{r}

pollock_nodes_extract <- pollock_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(pollock_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

pollock_graph <- tbl_graph(nodes = pollock_nodes_extract,
                       edges = pollock_edges_aggregated,
                       directed = TRUE)

pollock_graph

```

### Visualisation

```{r}


nodes_dfpollock <- pollock_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label)

edges_dfpollock <- pollock_graph %>%
  activate(edges) %>%
  as_tibble()

vispollock_graph <- visNetwork(nodes = nodes_dfpollock, edges = edges_dfpollock) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vispollock_graph


```

### Matching

```{r}

matched_pollock <- pollock_edges_aggregated[
  pollock_edges_aggregated$source %in% MC2_edges$source &
  pollock_edges_aggregated$target %in% MC2_edges$target,
]

# Remove rows with invalid vertex indices
matched_pollock <- matched_pollock[!is.na(matched_pollock$source) & !is.na(matched_pollock$target),]

mpollock_nodes_extract <- matched_pollock %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(matched_pollock %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

mpollock_graph <- tbl_graph(nodes = mpollock_nodes_extract,
                            edges = matched_pollock,
                            directed = TRUE)

nodes_dfmpollock <- mpollock_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id = as.character(row_number())) %>%
  select(id, label)

edges_dfmpollock <- mpollock_graph %>%
  activate(edges) %>%
  as_tibble()

vismpollock_graph <- visNetwork(nodes = nodes_dfmpollock, edges = edges_dfmpollock) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vismpollock_graph



```

### Jaccard Similarity Score

```{r}
common_edges_pollock <- intersect(E(pollock_graph), E(mpollock_graph))

# Calculate the Jaccard similarity coefficient
jaccard_similarity_pollock <- length(common_edges_pollock) / (length(E(pollock_graph)) + length(E(mpollock_graph)) - length(common_edges_pollock))

# Print the Jaccard similarity coefficient
print(jaccard_similarity_pollock)




```
:::

## 4.9 Sal WGL

```{r}
salw_nodes <- as_tibble(sal_wgl$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

salw_edges <- as_tibble(sal_wgl$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
salw_edges <- salw_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
  
salmonwgl_edges_aggregated <- salw_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```

::: panel-tabset
### Summary

```{r}
salmonwgl_nodes_extract <- salmonwgl_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(salmonwgl_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

salmonwgl_graph <- tbl_graph(nodes = salmonwgl_nodes_extract,
                       edges = salmonwgl_edges_aggregated,
                       directed = TRUE)

salmonwgl_graph


```

### Visualisation

```{r}

nodes_dfsalmonwgl <- salmonwgl_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label)

edges_dfsalmonwgl <- salmonwgl_graph %>%
  activate(edges) %>%
  as_tibble()

vissalmonwgl_graph <- visNetwork(nodes = nodes_dfsalmonwgl, edges = edges_dfsalmonwgl) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vissalmonwgl_graph


```

### Matching

```{r}


matched_salmonwgl <- salmonwgl_edges_aggregated[
  salmonwgl_edges_aggregated$source %in% MC2_edges$source &
  salmonwgl_edges_aggregated$target %in% MC2_edges$target,
]

# Remove rows with invalid vertex indices
matched_salmonwgl <- matched_salmonwgl[!is.na(matched_salmonwgl$source) & !is.na(matched_salmonwgl$target),]

msalmonwgl_nodes_extract <- matched_salmonwgl %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(matched_salmonwgl %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

msalmonwgl_graph <- tbl_graph(nodes = msalmonwgl_nodes_extract,
                            edges = matched_salmonwgl,
                            directed = TRUE)

nodes_dfmsalmonwgl <- msalmonwgl_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id = as.character(row_number())) %>%
  select(id, label)

edges_dfmsalmonwgl <- msalmonwgl_graph %>%
  activate(edges) %>%
  as_tibble()

vismsalmonwgl_graph <- visNetwork(nodes = nodes_dfmsalmonwgl, edges = edges_dfmsalmonwgl) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vismsalmonwgl_graph

```

### Jaccard Similarity Score

```{r}
common_edges_salmonwgl <- intersect(E(salmonwgl_graph), E(msalmonwgl_graph))

# Calculate the Jaccard similarity coefficient
jaccard_similarity_salmonwgl <- length(common_edges_salmonwgl) / (length(E(salmonwgl_graph)) + length(E(msalmonwgl_graph)) - length(common_edges_salmonwgl))

# Print the Jaccard similarity coefficient
print(jaccard_similarity_salmonwgl)




```
:::

### 4.10 Salmon

```{r}
salmon_nodes <- as_tibble(salmon$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

salmon_edges <- as_tibble(salmon$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
salmon_edges <- salmon_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
  

salmon_edges_aggregated <- salmon_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```

::: panel-tabset
### Summary

```{r}
salmon_nodes_extract <- salmon_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(salmon_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

salmon_graph <- tbl_graph(nodes = salmon_nodes_extract,
                       edges = salmon_edges_aggregated,
                       directed = TRUE)

salmon_graph


```

### Visualisation

```{r}


nodes_dfsalmon <- salmon_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label)

edges_dfsalmon <- salmon_graph %>%
  activate(edges) %>%
  as_tibble()

vissalmon_graph <- visNetwork(nodes = nodes_dfsalmon, edges = edges_dfsalmon) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vissalmon_graph



```

### Matching

```{r}

matched_salmon <- salmon_edges_aggregated[
  salmon_edges_aggregated$source %in% MC2_edges$source &
  salmon_edges_aggregated$target %in% MC2_edges$target,
]

# Remove rows with invalid vertex indices
matched_salmon <- matched_salmon[!is.na(matched_salmon$source) & !is.na(matched_salmon$target),]

msalmon_nodes_extract <- matched_salmon %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(matched_salmon %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

msalmon_graph <- tbl_graph(nodes = msalmon_nodes_extract,
                            edges = matched_salmon,
                            directed = TRUE)

nodes_dfmsalmon <- msalmon_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id = as.character(row_number())) %>%
  select(id, label)

edges_dfmsalmon <- msalmon_graph %>%
  activate(edges) %>%
  as_tibble()

vismsalmon_graph <- visNetwork(nodes = nodes_dfmsalmon, edges = edges_dfmsalmon) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vismsalmon_graph



```

### Jaccard Similarity Score

```{r}
common_edges_salmon <- intersect(E(salmon_graph), E(msalmon_graph))

# Calculate the Jaccard similarity coefficient
jaccard_similarity_salmon <- length(common_edges_salmon) / (length(E(salmon_graph)) + length(E(msalmon_graph)) - length(common_edges_salmon))

# Print the Jaccard similarity coefficient
print(jaccard_similarity_salmon)


```
:::

## 4.11 Shark

```{r}
shark_nodes <- as_tibble(shark$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

shark_edges <- as_tibble(shark$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
shark_edges <- shark_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')

shark_edges_aggregated <- shark_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()  
```

::: panel-tabset
### Summary

```{r}
shark_nodes_extract <- shark_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(shark_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

shark_graph <- tbl_graph(nodes = shark_nodes_extract,
                       edges = shark_edges_aggregated,
                       directed = TRUE)

shark_graph
```

### Visualise Shark

```{r}

nodes_dfshark <- shark_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label)

edges_dfshark <- shark_graph %>%
  activate(edges) %>%
  as_tibble()

visshark_graph <- visNetwork(nodes = nodes_dfshark, edges = edges_dfshark) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

visshark_graph

```

### Matching Shark

```{r}

matched_shark <- shark_edges_aggregated[
  shark_edges_aggregated$source %in% MC2_edges$source &
  shark_edges_aggregated$target %in% MC2_edges$target,
]

# Remove rows with invalid vertex indices
matched_shark <- matched_shark[!is.na(matched_shark$source) & !is.na(matched_shark$target),]

mshark_nodes_extract <- matched_shark %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(matched_shark %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

mshark_graph <- tbl_graph(nodes = mshark_nodes_extract,
                            edges = matched_shark,
                            directed = TRUE)

nodes_dfmshark <- mshark_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id = as.character(row_number())) %>%
  select(id, label)

edges_dfmshark <- mshark_graph %>%
  activate(edges) %>%
  as_tibble()

vismshark_graph <- visNetwork(nodes = nodes_dfmshark, edges = edges_dfmshark) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vismshark_graph


```

### Jaccard Similarity Score

```{r}
common_edges_shark <- intersect(E(shark_graph), E(mshark_graph))

# Calculate the Jaccard similarity coefficient
jaccard_similarity_shark <- length(common_edges_shark) / (length(E(shark_graph)) + length(E(mshark_graph)) - length(common_edges_shark))

# Print the Jaccard similarity coefficient
print(jaccard_similarity_shark)




```
:::

## 4.12 Tuna

```{r}
tuna_nodes <- as_tibble(tuna$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

tuna_edges <- as_tibble(tuna$links) %>%
  select(source, target, valueofgoods_omu, hscode, arrivaldate)

# rename columns
tuna_edges <- tuna_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
  
tuna_edges_aggregated <- tuna_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE)) %>%
  ungroup()
```

::: panel-tabset
### Summary

```{r}
tuna_nodes_extract <- tuna_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(tuna_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

tuna_graph <- tbl_graph(nodes = tuna_nodes_extract,
                       edges = tuna_edges_aggregated,
                       directed = TRUE)

tuna_graph


```

### Visualise Tuna

```{r}
nodes_dftuna <- tuna_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label)

edges_dftuna <- tuna_graph %>%
  activate(edges) %>%
  as_tibble()

vistuna_graph <- visNetwork(nodes = nodes_dftuna, edges = edges_dftuna) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vistuna_graph
```

### Matching Tuna

```{r}

matched_tuna <- tuna_edges_aggregated[
  tuna_edges_aggregated$source %in% MC2_edges$source &
  tuna_edges_aggregated$target %in% MC2_edges$target,
]

# Remove rows with invalid vertex indices
matched_tuna <- matched_tuna[!is.na(matched_tuna$source) & !is.na(matched_tuna$target),]

mtuna_nodes_extract <- matched_tuna %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(matched_tuna %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

mtuna_graph <- tbl_graph(nodes = mtuna_nodes_extract,
                            edges = matched_tuna,
                            directed = TRUE)

nodes_dfmtuna <- mtuna_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id = as.character(row_number())) %>%
  select(id, label)

edges_dfmtuna <- mtuna_graph %>%
  activate(edges) %>%
  as_tibble()

vistuna_graph <- visNetwork(nodes = nodes_dfmtuna, edges = edges_dfmtuna) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

vistuna_graph

```

### Jaccard Similarity Score

```{r}
common_edges_tuna <- intersect(E(tuna_graph), E(mtuna_graph))

# Calculate the Jaccard similarity coefficient
jaccard_similarity_tuna <- length(common_edges_tuna) / (length(E(tuna_graph)) + length(E(mtuna_graph)) - length(common_edges_tuna))

# Print the Jaccard similarity coefficient
print(jaccard_similarity_tuna)




```
:::

## Conclusion

```{r}
# Calculate Jaccard similarity scores
jaccard_scores <- data.frame(
  Graph = c("Carp", "Chub Mackerel", "Cod", "Catfish", "Herring", "Lichen", "Mackerel", "Pollock", "Salmon WGL", "Salmon", "Shark", "Tuna"),
  Jaccard_Similarity = c(jaccard_similaritycarp, jaccard_similaritycmac,
jaccard_similaritycod,                   jaccard_similarity_catfish, jaccard_similarity_herring, jaccard_similarity_lichen, jaccard_similarity_mackerel, jaccard_similarity_pollock, jaccard_similarity_salmonwgl, jaccard_similarity_salmon, jaccard_similarity_shark, jaccard_similarity_tuna)
)

# Sort the data frame by Jaccard similarity in descending order
jaccard_scores_sorted <- jaccard_scores %>%
  arrange(desc(Jaccard_Similarity))

# Print the sorted table
print(jaccard_scores_sorted)

```

::: {.cushbox .cushicon}
By stacking the bundles by their Jaccard Similarity Coefficients (descending order), we see that the most reliable bundles are **Lichen, Salmon, Shark and Tuna**, which all scored 1.0, indicating total similarity for the dataset in the bundles.

Conversely, **Cod** is the least reliable, scoring the lowest, and by a substantial margin from the other bundles.
:::

## Data Limitations

::: {.bubblebox .bubbleicon}
For future analysis, a few areas should be considered:

1)  **Homogeneity of bundle data** - certain bundles (i.e. Catfish) were missing columns of data like Weight(kg), which would prevent it from being useful should that be a factor of consideration in our analysis into illegal fishing.

2)  **Single Currency** - Similarly, bundles values are all in OMU, but MC2 dataset contains mix of OMU and USD values. It is proposed to either convert all values to OMU for ease of analysis, or minimally provide the exchange rate for our own use.
:::
