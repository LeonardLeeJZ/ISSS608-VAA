---
title: "Take-Home Exercise 2"
author: "Leonard Lee"
format:
  html:
    code-fold: true
    code-summary: "Show me the good stuff"
execute:
  warning: false
date: "18 May 2023"
date-modified: "`r Sys.Date()`"
---

# 1 Loading the Packages

```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts, jsonlite, patchwor, gridExtra)


```

# 2 Importing the Data

::: panel-tabset

### 2.1 Main Dataset
```{r}
MC2 <- fromJSON("data/mc2_challenge_graph.json")

```

### MC2 Overview
```{r}
glimpse(MC2)
```

### 2.2 Fish Bundles

```{r}

carp <- fromJSON("data/carp.json")
catfish <- fromJSON("data/catfish.json")
c_mac <- fromJSON("data/chub_mackerel.json")
cod <- fromJSON("data/cod2.json")
herring <- fromJSON("data/herring.json")
lichen <- fromJSON("data/lichen.json")
mac <- fromJSON("data/mackerel.json")
pol <- fromJSON("data/pollock.json")
salmon <- fromJSON("data/salmon.json")
sal_wgl <- fromJSON("data/salmon_wgl.json")
shark <- fromJSON("data/shark.json")
tuna <- fromJSON("data/tuna.json")

```
:::

# 3 Data Preparation  

## 3.1 Reorganise Dataset
```{r}
MC2_nodes <- as_tibble(MC2$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

MC2_edges <- as_tibble(MC2$links) %>%
  select(source, target, valueofgoods_omu, valueofgoodsusd, weightkg, hscode, arrivaldate)

```

## 3.2 Remove duplicate rows

```{r}
MC2_edges <- MC2_edges %>% distinct()
MC2_nodes <- MC2_nodes %>% distinct()

```

## 3.2 Rename Columns
```{r}
MC2_edges <- MC2_edges %>%
  mutate(Month = month(arrivaldate,
                        label = TRUE,
                        abbr = FALSE))

# rename columns
MC2_edges <- MC2_edges %>%
  rename('Value_OMU' = 'valueofgoods_omu', 
         'Value_USD' = 'valueofgoodsusd', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')

```

## 3.3 Remove Rows with NA in Source/Target Columns

As we are examining links between **source** and **target** columns, we will first remove rows with missing values in these columns as they will not be contributing to the analysis.

```{r}
MC2_edges <- MC2_edges[complete.cases(MC2_edges[, c("source", "target")]), ]

colSums(is.na(MC2_edges))

```
::: {.bubblebox .bubbleicon}
While there are missing (NA) fields in **Value_OMU** and **Value_USD**, the key columns being examined (**source** and **target**) do not possess any missing values.
:::

# 4 Data Exploration and Comparison

::: {.cushbox .cushicon}
To determine which bundles of predictive network models are reliable, we will first visualise the respective network models, before comparing them with the same links extracted from MC2.

:::

## 4.1 Carp

```{r}
carp_nodes <- as_tibble(carp$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

carp_edges <- as_tibble(carp$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
carp_edges <- carp_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
  
carp_edges_aggregated <- carp_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```

::: panel-tabset

### Visualise Carp

```{r, warning=FALSE}

carp_nodes_extract <- carp_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(carp_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

carp_nodes <- carp_nodes_extract %>%
  mutate(id = as.character(id))  # Convert id column to character type

carp_edges <- carp_edges_aggregated %>%
  mutate(from = as.character(source),  # Convert source and target columns to character type
         to = as.character(target))

carp_graph <- visNetwork(nodes = carp_nodes, edges = carp_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)


carp_graph
```


### Matching Carp
```{r, warning=FALSE}

matched_carp <- carp_edges_aggregated[
  carp_edges_aggregated$source %in% MC2_edges$source &
  carp_edges_aggregated$target %in% MC2_edges$target,
]

colnames(matched_carp) <- c("from", "to")

nodes_df1 <- data.frame(id = unique(c(matched_carp$from, matched_carp$to)))

mcarp_graph <- visNetwork(nodes = nodes_df1, edges = matched_carp,
                          width = "100%", height = "400px") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes(title = "id") %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

mcarp_graph

```

:::

## 4.2 C_mac

```{r}
cmac_nodes <- as_tibble(c_mac$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

cmac_edges <- as_tibble(c_mac$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
cmac_edges <- cmac_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
  
cmac_edges_aggregated <- cmac_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```

::: panel-tabset

### Visualise Chub Mackerel
```{r, warning= FALSE}

cmac_nodes_extract <- cmac_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(cmac_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

cmac_nodes <- cmac_nodes_extract %>%
  mutate(id = as.character(id))  # Convert id column to character type

cmac_edges <- cmac_edges_aggregated %>%
  mutate(from = as.character(source),  # Convert source and target columns to character type
         to = as.character(target))

cmac_graph <- visNetwork(nodes = cmac_nodes, edges = cmac_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)


cmac_graph


```

### Matching Chub Mackerel
```{r, warning=FALSE}

matched_cmac <- cmac_edges_aggregated[
  cmac_edges_aggregated$source %in% MC2_edges$source &
  cmac_edges_aggregated$target %in% MC2_edges$target,
]

colnames(matched_cmac) <- c("from", "to")

nodes_df2 <- data.frame(id = unique(c(matched_cmac$from, matched_cmac$to)))

mcmac_graph <-visNetwork(nodes = nodes_df2, edges = matched_cmac,
                         width = "100%", height = "400px") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes(title = "id") %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)


mcmac_graph
```

:::

## 4.3 Cod

```{r}
cod_nodes <- as_tibble(cod$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

cod_edges <- as_tibble(cod$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
cod_edges <- cod_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
 
cod_edges_aggregated <- cod_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```

::: panel-tabset

### Visualise Cod
```{r, warning= FALSE}
cod_nodes_extract <- cod_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(cod_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

cod_nodes <- cod_nodes_extract %>%
  mutate(id = as.character(id))  # Convert id column to character type

cod_edges <- cod_edges_aggregated %>%
  mutate(from = as.character(source),  # Convert source and target columns to character type
         to = as.character(target))

cod_graph <- visNetwork(nodes = cod_nodes, edges = cod_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)


cod_graph
```

### Matching Cod
```{r, warning=FALSE}

matched_cod <- cod_edges_aggregated[
  cod_edges_aggregated$source %in% MC2_edges$source &
  cod_edges_aggregated$target %in% MC2_edges$target,
]

colnames(matched_cod) <- c("from", "to")

nodes_df3 <- data.frame(id = unique(c(matched_cod$from, matched_cod$to)))

mcod_graph <- visNetwork(nodes = nodes_df3, edges = matched_cod,
                         width = "100%", height = "400px") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes(title = "id") %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

mcod_graph 

```
:::

## 4.4 Catfish

###no weight data

```{r}
catfish_nodes <- as_tibble(catfish$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

catfish_edges <- as_tibble(catfish$links) %>%
  select(source, target, valueofgoods_omu, hscode, arrivaldate)

# rename columns
catfish_edges <- catfish_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')

catfish_edges_aggregated <- catfish_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE)) %>%
  ungroup()

```

::: panel-tabset

### Visualise Catfish
```{r, warning= FALSE}

catfish_nodes_extract <- catfish_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(catfish_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

catfish_nodes <- catfish_nodes_extract %>%
  mutate(id = as.character(id))  # Convert id column to character type

catfish_edges <- catfish_edges_aggregated %>%
  mutate(from = as.character(source),  # Convert source and target columns to character type
         to = as.character(target))

cat_graph <- visNetwork(nodes = catfish_nodes, edges = catfish_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

cat_graph

```



### Matching Catfish
```{r, warning=FALSE}


# Match the rows from catfish_edges_aggregated with MC2_edges
matched_cat <- catfish_edges_aggregated[
  catfish_edges_aggregated$source %in% MC2_edges$source &
  catfish_edges_aggregated$target %in% MC2_edges$target,
]

# Modify the column names in matched_cat
colnames(matched_cat) <- c("from", "to")

# Create a data frame of unique nodes
nodes_df4 <- data.frame(id = unique(c(matched_cat$from, matched_cat$to)))

# Create the network graph using visNetwork
mcat_graph <- visNetwork(nodes = nodes_df4, edges = matched_cat,
                         width = "100%", height = "400px") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes(title = "id") %>%
  visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T),
    nodesIdSelection = TRUE)


mcat_graph


```
:::

## 4.5 Herring

```{r}
herring_nodes <- as_tibble(herring$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

herring_edges <- as_tibble(herring$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
herring_edges <- herring_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
  
herring_edges_aggregated <- herring_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```
::: panel-tabset

### Visualise Herring
```{r}

herring_nodes_extract <- herring_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(herring_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

herring_edges <- herring_edges_aggregated %>%
  mutate(from = as.character(source),  # Convert source and target columns to character type
         to = as.character(target))

herring_graph <- visNetwork(nodes = herring_nodes_extract, edges = herring_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

herring_graph
```

### Matching Herring

```{r}

# Match the rows from herring_edges_aggregated with MC2_edges
matched_herring <- herring_edges_aggregated[
  herring_edges_aggregated$source %in% MC2_edges$source &
  herring_edges_aggregated$target %in% MC2_edges$target,
]

# Modify the column names in matched_herring
colnames(matched_herring) <- c("from", "to")

# Create a data frame of unique nodes
nodes_df_herring <- data.frame(id = unique(c(matched_herring$from, matched_herring$to)))

# Create the network graph using visNetwork
mherring_graph <- visNetwork(nodes = nodes_df_herring, edges = matched_herring,
                         width = "100%", height = "400px") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes(title = "id") %>%
  visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T),
    nodesIdSelection = TRUE)


mherring_graph


```
:::


## 4.6 Lichen

```{r}
lichen_node <- as_tibble(lichen$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

lichen_edges <- as_tibble(lichen$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
lichen_edges <- lichen_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
 
lichen_edges_aggregated <- lichen_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```
::: panel-tabset

### Visualise Lichen
```{r}

lichen_nodes_extract <- lichen_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(lichen_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

lichen_nodes <- lichen_nodes_extract %>%
  mutate(id = as.character(id))  # Convert id column to character type

lichen_edges <- lichen_edges_aggregated %>%
  mutate(from = as.character(source),  # Convert source and target columns to character type
         to = as.character(target))

lichen_graph <- visNetwork(nodes = lichen_nodes, edges = lichen_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

lichen_graph

```
### Matching Lichen

```{r, warnin= FALSE}
# Match the rows from lichen_edges_aggregated with MC2_edges
matched_lichen <- lichen_edges_aggregated[
  lichen_edges_aggregated$source %in% MC2_edges$source &
  lichen_edges_aggregated$target %in% MC2_edges$target,
]

# Modify the column names in matched_lichen
colnames(matched_lichen) <- c("from", "to")

# Create a data frame of unique nodes
nodes_df_lichen <- data.frame(id = unique(c(matched_lichen$from, matched_lichen$to)))

# Create the network graph using visNetwork
mlichen_graph <- visNetwork(nodes = nodes_df_lichen, edges = matched_lichen,
                         width = "100%", height = "400px") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes(title = "id") %>%
  visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T),
    nodesIdSelection = TRUE)


mlichen_graph


```
:::

## 4.7 Mackerel

```{r}
mac_nodes <- as_tibble(mac$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

mac_edges <- as_tibble(mac$links) %>%
  select(source, target, valueofgoods_omu, hscode, arrivaldate)

# rename columns
mac_edges <- mac_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
  
mac_edges_aggregated <- mac_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE)) %>%
  ungroup()

```
::: panel-tabset

### Visualise Mackerel
```{r}

mac_nodes_extract <- mac_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(mac_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

mac_nodes <- mac_nodes_extract %>%
  mutate(id = as.character(id))  # Convert id column to character type

mac_edges <- mac_edges_aggregated %>%
  mutate(from = as.character(source),  # Convert source and target columns to character type
         to = as.character(target))

mackerel_graph <- visNetwork(nodes = mac_nodes, edges = mac_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

mackerel_graph


```

### Matching Mackerel

```{r}
# Match the rows from mac_edges_aggregated with MC2_edges
matched_mackerel <- mac_edges_aggregated[
  mac_edges_aggregated$source %in% MC2_edges$source &
  mac_edges_aggregated$target %in% MC2_edges$target,
]

# Modify the column names in matched_mackerel
colnames(matched_mackerel) <- c("from", "to")

# Create a data frame of unique nodes
nodes_df_mackerel <- data.frame(id = unique(c(matched_mackerel$from, matched_mackerel$to)))

# Create the network graph using visNetwork
mmackerel_graph <- visNetwork(nodes = nodes_df_mackerel, edges = matched_mackerel,
                         width = "100%", height = "400px") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes(title = "id") %>%
  visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T),
    nodesIdSelection = TRUE)


mmackerel_graph


```
:::

## 4.8 Pollock

```{r}
pol_nodes <- as_tibble(pol$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

pol_edges <- as_tibble(pol$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
pol_edges <- pol_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')


pol_edges_aggregated <- pol_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```
::: panel-tabset

### Visualise Pollock
```{r}

pol_nodes_extract <- pol_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(pol_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

pol_nodes <- pol_nodes_extract %>%
  mutate(id = as.character(id))  # Convert id column to character type

pol_edges <- pol_edges_aggregated %>%
  mutate(from = as.character(source),  # Convert source and target columns to character type
         to = as.character(target))

pol_graph <- visNetwork(nodes = pol_nodes, edges = pol_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

pol_graph
```


### Matching Pollock

```{r}
# Match the rows from pol_edges_aggregated with MC2_edges
matched_pollock <- pol_edges_aggregated[
  pol_edges_aggregated$source %in% MC2_edges$source &
  pol_edges_aggregated$target %in% MC2_edges$target,
]

# Modify the column names in matched_pollock
colnames(matched_pollock) <- c("from", "to")

# Create a data frame of unique nodes
nodes_df_pollock <- data.frame(id = unique(c(matched_pollock$from, matched_pollock$to)))

# Create the network graph using visNetwork
mpol_graph <- visNetwork(nodes = nodes_df_pollock, edges = matched_pollock,
                         width = "100%", height = "400px") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes(title = "id") %>%
  visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T),
    nodesIdSelection = TRUE)

mpol_graph

```
:::

## 4.9 Sal WGL

```{r}
salw_nodes <- as_tibble(sal_wgl$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

salw_edges <- as_tibble(sal_wgl$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
salw_edges <- salw_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
  
salw_edges_aggregated <- salw_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```
::: panel-tabset

### Visualise Sal WGL
```{r}

sal_wgl_nodes_extract <- salw_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(salw_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

sal_wgl_nodes <- sal_wgl_nodes_extract %>%
  mutate(id = as.character(id))  # Convert id column to character type

sal_wgl_edges <- salw_edges_aggregated %>%
  mutate(from = as.character(source),  # Convert source and target columns to character type
         to = as.character(target))

salwgl_graph <- visNetwork(nodes = sal_wgl_nodes, edges = sal_wgl_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

salwgl_graph

```

### Matching Sal WGL

```{r}

# Match the rows from salw_edges_aggregated with MC2_edges
matched_salwgl <- salw_edges_aggregated[
  salw_edges_aggregated$source %in% MC2_edges$source &
  salw_edges_aggregated$target %in% MC2_edges$target,
]

# Modify the column names in matched_salwgl
colnames(matched_salwgl) <- c("from", "to")

# Create a data frame of unique nodes
nodes_df_salwgl <- data.frame(id = unique(c(matched_salwgl$from, matched_salwgl$to)))

# Create the network graph using visNetwork
msalwgl_graph <- visNetwork(nodes = nodes_df_salwgl, edges = matched_salwgl,
                         width = "100%", height = "400px") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes(title = "id") %>%
  visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T),
    nodesIdSelection = TRUE)

# Display the graph
msalwgl_graph



```
:::

### 4.10 Salmon

```{r}
salmon_nodes <- as_tibble(salmon$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

salmon_edges <- as_tibble(salmon$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
salmon_edges <- salmon_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
  

salmon_edges_aggregated <- salmon_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()

```
::: panel-tabset

### Visualise Salmon
```{r}

salmon_nodes_extract <- salmon_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(salmon_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

salmon_nodes <- salmon_nodes_extract %>%
  mutate(id = as.character(id))  # Convert id column to character type

salmon_edges <- salmon_edges_aggregated %>%
  mutate(from = as.character(source),  # Convert source and target columns to character type
         to = as.character(target))

salmon_graph <- visNetwork(nodes = salmon_nodes, edges = salmon_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

salmon_graph


```

### Matching Salmon

```{r}
# Match the rows from salmon_edges_aggregated with MC2_edges
matched_salmon <- salmon_edges_aggregated[
  salmon_edges_aggregated$source %in% MC2_edges$source &
  salmon_edges_aggregated$target %in% MC2_edges$target,
]

# Modify the column names in matched_salmon
colnames(matched_salmon) <- c("from", "to")

# Create a data frame of unique nodes
nodes_df_salmon <- data.frame(id = unique(c(matched_salmon$from, matched_salmon$to)))

# Create the network graph using visNetwork
msalmon_graph <- visNetwork(nodes = nodes_df_salmon, edges = matched_salmon,
                         width = "100%", height = "400px") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes(title = "id") %>%
  visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T),
    nodesIdSelection = TRUE)

# Display the graph
msalmon_graph


```
:::

## 4.11 Shark

```{r}
shark_nodes <- as_tibble(shark$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

shark_edges <- as_tibble(shark$links) %>%
  select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)

# rename columns
shark_edges <- shark_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'Weight_KG' = 'weightkg', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')

shark_edges_aggregated <- shark_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE),
            Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
            Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
  ungroup()  
```
::: panel-tabset

### Visualise Shark
```{r}

shark_nodes_extract <- shark_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(shark_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

shark_edges <- shark_edges_aggregated %>%
  mutate(from = as.character(source),  # Convert source and target columns to character type
         to = as.character(target))

shark_graph <- visNetwork(nodes = shark_nodes_extract, edges = shark_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

shark_graph
```

### Matching Shark

```{r}

# Match the rows from shark_edges_aggregated with MC2_edges
matched_shark <- shark_edges_aggregated[
  shark_edges_aggregated$source %in% MC2_edges$source &
  shark_edges_aggregated$target %in% MC2_edges$target,
]

# Modify the column names in matched_shark
colnames(matched_shark) <- c("from", "to")

# Create a data frame of unique nodes
nodes_df_shark <- data.frame(id = unique(c(matched_shark$from, matched_shark$to)))

# Create the network graph using visNetwork
mshark_graph <- visNetwork(nodes = nodes_df_shark, edges = matched_shark,
                         width = "100%", height = "400px") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes(title = "id") %>%
  visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T),
    nodesIdSelection = TRUE)

# Display the graph
mshark_graph


```
:::

## 4.12 Tuna

```{r}
tuna_nodes <- as_tibble(tuna$nodes) %>%
  select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns

tuna_edges <- as_tibble(tuna$links) %>%
  select(source, target, valueofgoods_omu, hscode, arrivaldate)

# rename columns
tuna_edges <- tuna_edges %>%
  rename('source' = 'source', 
         'target' = 'target', 
         'Value_OMU' = 'valueofgoods_omu', 
         'HS_Code' = 'hscode', 
         'Arrival_Date' = 'arrivaldate')
  
tuna_edges_aggregated <- tuna_edges %>%
  group_by(source,target, HS_Code) %>%
  summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
            Count = n(),
            Average_OMU = mean(Value_OMU, na.rm = TRUE)) %>%
  ungroup()
```
::: panel-tabset

### Visualise Tuna
```{r}

tuna_nodes_extract <- tuna_edges_aggregated %>%
  select(source) %>%
  rename(id = source) %>%
  bind_rows(tuna_edges_aggregated %>%
              select(target) %>%
              rename(id = target)) %>%
  distinct()

tuna_edges <- tuna_edges_aggregated %>%
  mutate(from = as.character(source),  # Convert source and target columns to character type
         to = as.character(target))

tuna_graph <- visNetwork(nodes = tuna_nodes_extract, edges = tuna_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes() %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
             nodesIdSelection = TRUE)

tuna_graph


```


### Matching Tuna

```{r}
# Match the rows from tuna_edges_aggregated with MC2_edges
matched_tuna <- tuna_edges_aggregated[
  tuna_edges_aggregated$source %in% MC2_edges$source &
  tuna_edges_aggregated$target %in% MC2_edges$target,
]

# Modify the column names in matched_tuna
colnames(matched_tuna) <- c("from", "to")

# Create a data frame of unique nodes
nodes_df_tuna <- data.frame(id = unique(c(matched_tuna$from, matched_tuna$to)))

# Create the network graph using visNetwork
mtuna_graph <- visNetwork(nodes = nodes_df_tuna, edges = matched_tuna,
                         width = "100%", height = "400px") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
  visNodes(title = "id") %>%
  visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T),
    nodesIdSelection = TRUE)

# Display the graph
mtuna_graph


```
:::
