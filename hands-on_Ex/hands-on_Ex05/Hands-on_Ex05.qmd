---
title: "Hands-On Exercise 5"
author: "Leonard Lee"
format:
  html:
    code-fold: true
    code-summary: "Show me the good stuff"
execute:
  warning: false
date: "11 May 2023"
---

# 1 Preparation

## 1.1 Loading the Packages

```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts)


```

## 1.2 Importing the Data

```{r}

GAStech_nodes <- read_csv("data/GAStech_email_node.csv")
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")

glimpse(GAStech_edges)

```

# 2 Data Preparation

::: {.cushbox .cushicon}
-   Transform SentDate to Date Data Type using **dmy()**
-   wday() will return day of week as decimal no. or orderd factor if label is true.
:::

## 2.1 Changing Date & Time Formats

```{r}

GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))
glimpse(GAStech_edges)


```

## 2.1 Aggregating Attributes

The following code aggregates the data by date, senders, receivers, main subject and day of the week, since the dataframe consists of individual email flow records, which are not visualisation-friendly.

```{r}

GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()

glimpse(GAStech_edges_aggregated)

```

# 3 Creating Network Objects using tidygraph

## 3.1 Using tbl_graph()

```{r}

GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)

GAStech_graph


```

## 3.2 Using activate() to change activate object

Dataframe is activated by default, but using **activate()** function, we can change which one is active. We can also use **arrange()** to reorder rows in edge tibble.

```{r}

GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))

```

# 4 Using ggraph package to plit Static Network Graph

## 4.1 Basic Network Graph

```{r}

ggraph(GAStech_graph) +
  geom_edge_link() +
  geom_node_point() +
  theme_graph(background = NA)


```

```{r}

th_foreground(
  foreground = "#F8F3E6", 
  border = FALSE)

```

## 4.2 Themes and Colours

```{r}

g <- ggraph(
  GAStech_graph
  ) + 
  geom_edge_link(
    aes(colour = 'grey50')
  ) +
  geom_node_point(
    aes(colour = 'grey40'))

g + theme_graph(background = 'grey10',
                text_colour = 'white')


```

## 4.3 Graph Layouts

### Fruchterman & Reingold layout

```{r}

g <- ggraph(
  GAStech_graph, 
    layout = "fr"
  ) +
  geom_edge_link(
    aes()
  ) +
  geom_node_point(
    aes())

g + theme_graph()

```

### Adding Colours

```{r}

g <- ggraph(
    GAStech_graph, 
    layout = "nicely"
  ) + 
  geom_edge_link(
    aes()
  ) +
  geom_node_point(
    aes(colour = Department, 
    size = 3))

g + theme_graph()


```

### Edges Modification

```{r}

g <- ggraph(GAStech_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 3)

g + theme_graph()


```

## 5 Facet Graphs

### 5.1 Edges

```{r}

set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)

```

### 5.2 Framed Facet Graphs

```{r}

set_graph_style() 

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_edges(~Weekday) +
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')

```

## 6 Facet Nodes

```{r, warning = FALSE}

set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_nodes(~Department)+
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')


```

## 7 Analysing Network Metrics

### 7.1 Centrality Measures

::: {.bubblebox .bubbleicon}
Centrality allows us to quantify the relationships within the network. It reports the connectivity of the node within a network, the complexity of a network, the clusters or sub-groups within a network.

Examples of Centrality Measures are as follows:

**Degree**: refers to the number of direct connections a node has. It is often interpreted in terms of the immediate risk of node for catching whatever is flowing through the network (such as a virus, or some information).

This is different from betweenness index, which smeasures the relative "weight" of importance of the node.

**Betweenness**: a centrality measure of a vertex within a graph. It is a way of detecting the amount of influence a node has over the flow of information in a graph. It is often used to find nodes that serve as a bridge from one part of a graph to another.Vertices that occur on many shortest paths between other vertices have higher betweenness than those that do not.

**In- and Out-degree**: If the network is directed (meaning that ties have direction), then we usually define two separate measures of degree centrality, namely indegree and outdegree. Indegree is a count of the number of ties directed to the node, and outdegree is the number of ties that the node directs to others.

For positive relations such as friendship or advice, we normally interpret indegree as a form of popularity, and outdegree as gregariousness.
:::

```{r}
gg <- GAStech_graph %>%
  # Use tidyverse functions for tidygraph
  mutate(betweenness_centrality = centrality_betweenness()) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department,
          # varying size of nodes by centrality measure            
            size=betweenness_centrality))
gg


```

## 8 Visnetwork Interactive Graphs

::: {.bubblebox .bubbleicon}
The nodes list must include an "id" column, and the edge list must have "from" and "to" columns. The function also plots the labels for the nodes, using the names of the actors from the "label" column in the node list.
:::

## 8.1 Preparation

```{r, warning = FALSE}

GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()


```

## 8.2 Graph Plotting

```{r}

visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") 

```

## 8.3 Colouring Groups

```{r}


GAStech_nodes <- GAStech_nodes %>%
  rename(group = Department) 

visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123)


```

## 8.4 Using visEdges() to specify curved edges

```{r}

visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)

```

## 8.5 Adding interactive menu using visOptions()

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)

```
