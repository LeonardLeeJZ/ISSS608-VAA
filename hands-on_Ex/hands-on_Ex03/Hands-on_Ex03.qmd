---
title: "Hands-on_Ex03"
author: "Leonard Lee"
execute:
  warning: false
---

# Load Packages


{pacman::p_load(ggiraph, plotly,} patchwork, DT, tidyverse)}
  


# Import the Data

exam_data \<- read_csv("data/Exam_data.csv")

# Tooltip effect using Tooltip aesthetic

## Creating interactive graph using ggiraph

p \<- ggplot(data=exam_data, aes(x = MATHS)) + geom_dotplot_interactive( aes(tooltip = ID), stackgroups = TRUE, binwidth = 1, method = "histodot") + scale_y\_continuous(NULL, breaks = NULL) girafe( ggobj = p, width_svg = 6, height_svg = 6\*0.618 )

## Displaying Multiple information

exam_data$tooltip <- c(paste0(  "Name = ", exam_data$ID,\
"\n Class =", exam_data\$CLASS))

p \<- ggplot(data=exam_data, aes(x = MATHS)) + geom_dotplot_interactive( aes(tooltip = exam_data\$tooltip), stackgroups = TRUE, binwidth = 1, method = "histodot") + scale_y\_continuous(NULL,\
breaks = NULL) girafe( ggobj = p, width_svg = 8, height_svg = 8\*0.618 )

## Customising Tooltip Style

tooltip_css \<- "background-color:white; #\<\< font-style:bold; color:black;" #\<\<

p \<- ggplot(data=exam_data, aes(x = MATHS)) + geom_dotplot_interactive(\
aes(tooltip = ID),\
stackgroups = TRUE,\
binwidth = 1,\
method = "histodot") +\
scale_y\_continuous(NULL,\
breaks = NULL) girafe(\
ggobj = p,\
width_svg = 6,\
height_svg = 6\*0.618, options = list( #\<\< opts_tooltip( #\<\< css = tooltip_css)) #\<\< )

### Displaying Statistics

tooltip \<- function(y, ymax, accuracy = .01) { mean \<- scales::number(y, accuracy = accuracy) sem \<- scales::number(ymax - y, accuracy = accuracy) paste("Mean maths scores:", mean, "+/-", sem) }

gg_point \<- ggplot(data=exam_data, aes(x = RACE), ) + stat_summary(aes(y = MATHS, tooltip = after_stat(\
tooltip(y, ymax))),\
fun.data = "mean_se", geom = GeomInteractiveCol,\
fill = "light blue" ) + stat_summary(aes(y = MATHS), fun.data = mean_se, geom = "errorbar", width = 0.2, size = 0.2 )

girafe(ggobj = gg_point, width_svg = 8, height_svg = 8\*0.618)

### Hover Effect

p \<- ggplot(data=exam_data, aes(x = MATHS)) + geom_dotplot_interactive(\
aes(data_id = CLASS),\
stackgroups = TRUE,\
binwidth = 1,\
method = "histodot") +\
scale_y\_continuous(NULL,\
breaks = NULL) girafe(\
ggobj = p,\
width_svg = 6,\
height_svg = 6\*0.618\
)

### Styling Hover Effect

p \<- ggplot(data=exam_data, aes(x = MATHS)) + geom_dotplot_interactive(\
aes(data_id = CLASS),\
stackgroups = TRUE,\
binwidth = 1,\
method = "histodot") +\
scale_y\_continuous(NULL,\
breaks = NULL) girafe(\
ggobj = p,\
width_svg = 6,\
height_svg = 6\*0.618, options = list(\
opts_hover(css = "fill: #202020;"),\
opts_hover_inv(css = "opacity:0.2;") )\
)

### Combining tooltip and hover

p \<- ggplot(data=exam_data, aes(x = MATHS)) + geom_dotplot_interactive(\
aes(tooltip = CLASS, data_id = CLASS),\
stackgroups = TRUE,\
binwidth = 1,\
method = "histodot") +\
scale_y\_continuous(NULL,\
breaks = NULL) girafe(\
ggobj = p,\
width_svg = 6,\
height_svg = 6\*0.618, options = list(\
opts_hover(css = "fill: #202020;"),\
opts_hover_inv(css = "opacity:0.2;") )\
)

### Click effect (using onclick)

exam_data$onclick <- sprintf("window.open(\"%s%s\")", "https://www.moe.gov.sg/schoolfinder?journey=Primary%20school", as.character(exam_data$ID))

p \<- ggplot(data=exam_data, aes(x = MATHS)) + geom_dotplot_interactive(\
aes(onclick = onclick),\
stackgroups = TRUE,\
binwidth = 1,\
method = "histodot") +\
scale_y\_continuous(NULL,\
breaks = NULL) girafe(\
ggobj = p,\
width_svg = 6,\
height_svg = 6\*0.618)

## Coordinated Multiple Views with ggiraph

In order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:

1)  Appropriate interactive functions of ggiraph will be used to create the multiple views.
2)  patchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.

p1 \<- ggplot(data=exam_data, aes(x = MATHS)) + geom_dotplot_interactive(\
aes(data_id = ID),\
stackgroups = TRUE,\
binwidth = 1,\
method = "histodot") +\
coord_cartesian(xlim=c(0,100)) + scale_y\_continuous(NULL,\
breaks = NULL)

p2 \<- ggplot(data=exam_data, aes(x = ENGLISH)) + geom_dotplot_interactive(\
aes(data_id = ID),\
stackgroups = TRUE,\
binwidth = 1,\
method = "histodot") + coord_cartesian(xlim=c(0,100)) + scale_y\_continuous(NULL,\
breaks = NULL)

girafe(code = print(p1 + p2), width_svg = 6, height_svg = 3, options = list( opts_hover(css = "fill: #202020;"), opts_hover_inv(css = "opacity:0.2;") ) )

## Interactive Data Visualisation (Plotly)

Two methods; plot_ly() and ggplotly()

plot_ly(data = exam_data, x = \~MATHS, y = \~ENGLISH)

### Interactive Scatter Plot (ggplotly())

p \<- ggplot(data=exam_data, aes(x = MATHS, y = ENGLISH)) + geom_point(size=1) + coord_cartesian(xlim=c(0,100), ylim=c(0,100)) ggplotly(p)

## Coordinated Multiple View with plotly

The creation of a coordinated linked plot by using plotly involves three steps:

1)  highlight_key() of plotly package is used as shared data.
2)  two scatterplots will be created by using ggplot2 functions.
3)  lastly, subplot() of plotly package is used to place them next to each other side-by-side.

d \<- highlight_key(exam_data) p1 \<- ggplot(data=d, aes(x = MATHS, y = ENGLISH)) + geom_point(size=1) + coord_cartesian(xlim=c(0,100), ylim=c(0,100))

p2 \<- ggplot(data=d, aes(x = MATHS, y = SCIENCE)) + geom_point(size=1) + coord_cartesian(xlim=c(0,100), ylim=c(0,100)) subplot(ggplotly(p1), ggplotly(p2))

## Interactive Data Table - Crosstalk methods

### DT Package

\` DT::datatable(exam_data, class= "compact")

## Linked Brushing (crosstalk)

d \<- highlight_key(exam_data) p \<- ggplot(d, aes(ENGLISH, MATHS)) + geom_point(size=1) + coord_cartesian(xlim=c(0,100), ylim=c(0,100))

gg \<- highlight(ggplotly(p),\
"plotly_selected")

crosstalk::bscols(gg,\
DT::datatable(d), widths = 5)

# Programming Animated Stats Graphics with R

## Loading Packages

pacman::p_load(readxl, gifski, gapminder, plotly, gganimate, tidyverse)

## Importing Data

col \<- c("Country", "Continent") globalPop \<- read_xls("data/GlobalPopulation.xls", sheet="Data") %\>% mutate_each\_(funs(factor(.)), col) %\>% mutate(Year = as.integer(Year))

## Animated Data Visualisation: gganimate methods

1)  transition\_\*() defines how the data should be spread out and how it relates to itself across time.
2)  view\_\*() defines how the positional scales should change along the animation.
3)  shadow\_\*() defines how data from other points in time should be presented in the given point in time.
4)  enter\_*()/exit\_*() defines how new data should appear and how old data should disappear during the course of the animation.
5)  ease_aes() defines how different aesthetics should be eased during transitions.

### Static Population Bubble Plot

ggplot(globalPop, aes(x = Old, y = Young, size = Population, colour = Country)) + geom_point(alpha = 0.7, show.legend = FALSE) + scale_colour_manual(values = country_colors) + scale_size(range = c(2, 12)) + labs(title = 'Year: {frame_time}', x = '% Aged', y = '% Young')

### Animated Bubble Plot

ggplot(globalPop, aes(x = Old, y = Young, size = Population, colour = Country)) + geom_point(alpha = 0.7, show.legend = FALSE) + scale_colour_manual(values = country_colors) + scale_size(range = c(2, 12)) + labs(title = 'Year: {frame_time}', x = '% Aged', y = '% Young') + transition_time(Year) +\
ease_aes('linear')

## ADV: plotly

In Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).

### Animated Bubble Plot: ggplotly() method

gg \<- ggplot(globalPop, aes(x = Old, y = Young, size = Population, colour = Country)) + geom_point(aes(size = Population, frame = Year), alpha = 0.7, show.legend = FALSE) + scale_colour_manual(values = country_colors) + scale_size(range = c(2, 12)) + labs(x = '% Aged', y = '% Young')

ggplotly(gg)

### Animated Bubble Plot: plot_ly() method

bp \<- globalPop %\>% plot_ly(x = \~Old, y = \~Young, size = \~Population, color = \~Continent, frame = \~Year, text = \~Country, hoverinfo = "text", type = 'scatter', mode = 'markers' ) bp
