id1 <- cod_edges_aggregated %>%
select(source) %>%
rename(id = source)
id2 <- cod_edges_aggregated %>%
select(target) %>%
rename(id = target)
cod_nodes_extract <- rbind(id1, id2) %>%
distinct()
cod_graph <- tbl_graph(nodes = cod_nodes_extract,
edges = cod_edges_aggregated,
directed = TRUE)
ggraph(cod_graph,
layout = "fr") +
ggeom_edge_link(aes(color = Count)) +
geom_node_point() +
theme_graph() +
scale_color_gradient(low = "blue", high = "red")
id1 <- cod_edges_aggregated %>%
select(source) %>%
rename(id = source)
id2 <- cod_edges_aggregated %>%
select(target) %>%
rename(id = target)
cod_nodes_extract <- rbind(id1, id2) %>%
distinct()
cod_graph <- tbl_graph(nodes = cod_nodes_extract,
edges = cod_edges_aggregated,
directed = TRUE)
ggraph(cod_graph,
layout = "fr") +
ggeom_edge_link(aes(color = Count)) +
geom_node_point() +
theme_graph() +
scale_color_gradient(low = "blue", high = "red")
id1 <- cod_edges_aggregated %>%
select(source) %>%
rename(id = source)
id2 <- cod_edges_aggregated %>%
select(target) %>%
rename(id = target)
cod_nodes_extract <- rbind(id1, id2) %>%
distinct()
cod_graph <- tbl_graph(nodes = cod_nodes_extract,
edges = cod_edges_aggregated,
directed = TRUE)
ggraph(cod_graph,
layout = "fr") +
ggeom_edge_link(aes(color = Count)) +
geom_node_point() +
theme_graph() +
scale_color_gradient(low = "blue", high = "red")
id1 <- cod_edges_aggregated %>%
select(source) %>%
rename(id = source)
id2 <- cod_edges_aggregated %>%
select(target) %>%
rename(id = target)
cod_nodes_extract <- rbind(id1, id2) %>%
distinct()
cod_graph <- tbl_graph(nodes = cod_nodes_extract,
edges = cod_edges_aggregated,
directed = TRUE)
ggraph(cod_graph,
layout = "fr") +
geom_edge_link(aes(color = Count)) +
geom_node_point() +
theme_graph() +
scale_color_gradient(low = "blue", high = "red")
id1 <- cod_edges_aggregated %>%
select(source) %>%
rename(id = source)
id2 <- cod_edges_aggregated %>%
select(target) %>%
rename(id = target)
cod_nodes_extract <- rbind(id1, id2) %>%
distinct()
cod_graph <- tbl_graph(nodes = cod_nodes_extract,
edges = cod_edges_aggregated,
directed = TRUE)
ggraph(cod_graph,
layout = "fr") +
geom_edge_link(aes(color = Count)) +
geom_node_point() +
theme_graph() +
scale_color_gradient(low = "blue", high = "red")
# Extract the matched rows using subsetting
matched_cod <- cod_edges_aggregated[cod_edges_aggregated$source %in% MC2_edges$source & cod_edges_aggregated$target %in% MC2_edges$target, ]
id1 <- matched_cod %>%
select(source) %>%
rename(id = source)
id2 <- matched_cod %>%
select(target) %>%
rename(id = target)
mcod_extract <- rbind(id1, id2) %>%
distinct()
mcod_graph <- tbl_graph(nodes = mcod_extract,
edges = matched_cod,
directed = TRUE)
ggraph(mcod_graph, layout = "fr") +
geom_edge_link(aes(color = Count)) +
geom_node_point() +
theme_graph() +
scale_color_gradient(low = "blue", high = "red")
catfish_nodes <- as_tibble(catfish$nodes) %>%
select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns
catfish_edges <- as_tibble(catfish$links) %>%
select(source, target, valueofgoods_omu, hscode, arrivaldate)
# rename columns
catfish_edges <- catfish_edges %>%
rename('source' = 'source',
'target' = 'target',
'Value_OMU' = 'valueofgoods_omu',
'HS_Code' = 'hscode',
'Arrival_Date' = 'arrivaldate')
catfish_edges_aggregated <- catfish_edges %>%
group_by(source,target, HS_Code) %>%
summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
Count = n(),
Average_OMU = mean(Value_OMU, na.rm = TRUE)) %>%
ungroup()
id1 <- catfish_edges_aggregated %>%
select(source) %>%
rename(id = source)
id2 <- catfish_edges_aggregated %>%
select(target) %>%
rename(id = target)
catfish_nodes_extract <- rbind(id1, id2) %>%
distinct()
catfish_graph <- tbl_graph(nodes = catfish_nodes_extract,
edges = catfish_edges_aggregated,
directed = TRUE)
ggraph(catfish_graph,
layout = "fr") +
geom_edge_link(aes(color = Count)) +
geom_node_point() +
theme_graph() +
scale_color_gradient(low = "blue", high = "red")
# Extract the matched rows using subsetting
matched_cat <- catfish_edges_aggregated[catfish_edges_aggregated$source %in% MC2_edges$source & catfish_edges_aggregated$target %in% MC2_edges$target, ]
id1 <- matched_cat %>%
select(source) %>%
rename(id = source)
id2 <- matched_cat %>%
select(target) %>%
rename(id = target)
mcat_extract <- rbind(id1, id2) %>%
distinct()
mcat_graph <- tbl_graph(nodes = mcat_extract,
edges = matched_cat,
directed = TRUE)
ggraph(mcat_graph, layout = "fr") +
geom_edge_link(aes(color = Count)) +
geom_node_point() +
theme_graph() +
scale_color_gradient(low = "blue", high = "red")
id1 <- catfish_edges_aggregated %>%
select(source) %>%
rename(id = source)
id2 <- catfish_edges_aggregated %>%
select(target) %>%
rename(id = target)
catfish_nodes_extract <- rbind(id1, id2) %>%
distinct()
catfish_graph <- tbl_graph(nodes = catfish_nodes_extract,
edges = catfish_edges_aggregated,
directed = TRUE)
ggraph(catfish_graph,
layout = "fr") +
geom_edge_link(aes(color = Count)) +
geom_node_point() +
theme_graph() +
scale_color_gradient(low = "blue", high = "red")
catfish_nodes <- catfish_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
catfish_edges <- catfish_edges_aggregated %>%
mutate(from = as.character(source),  # Convert source and target columns to character type
to = as.character(target))
visNetwork(nodes = catfish_nodes, edges = catfish_edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(color = list(color = "blue", highlight = "red")) %>%
visNodes() %>%
visOptions(manipulation = FALSE)
catfish_nodes <- catfish_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
catfish_edges <- catfish_edges_aggregated %>%
mutate(from = as.character(source),  # Convert source and target columns to character type
to = as.character(target))
visNetwork(nodes = catfish_nodes, edges = catfish_edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(color = list(color = "blue", highlight = "red")) %>%
visNodes() %>%
visOptions(manipulation = FALSE, hover = TRUE)
catfish_nodes <- catfish_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
catfish_edges <- catfish_edges_aggregated %>%
mutate(from = as.character(source),  # Convert source and target columns to character type
to = as.character(target))
visNetwork(nodes = catfish_nodes, edges = catfish_edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(color = list(color = "blue", highlight = "red")) %>%
visNodes() %>%
visInteraction(hover = TRUE)
catfish_nodes <- catfish_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
catfish_edges <- catfish_edges_aggregated %>%
mutate(from = as.character(source),  # Convert source and target columns to character type
to = as.character(target))
visNetwork(nodes = catfish_nodes, edges = catfish_edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(color = list(color = "blue", highlight = "red")) %>%
visNodes() %>%
visOptions(manipulation = FALSE,
tooltip = visTooltip(show = TRUE))
catfish_nodes <- catfish_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
catfish_edges <- catfish_edges_aggregated %>%
mutate(from = as.character(source),  # Convert source and target columns to character type
to = as.character(target))
visNetwork(nodes = catfish_nodes, edges = catfish_edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(color = list(color = "blue", highlight = "red")) %>%
visNodes() %>%
visInteraction(tooltipDelay = 100)
catfish_nodes <- catfish_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
catfish_edges <- catfish_edges_aggregated %>%
mutate(from = as.character(source),  # Convert source and target columns to character type
to = as.character(target))
visNetwork(nodes = catfish_nodes, edges = catfish_edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(color = list(color = "blue", highlight = "red")) %>%
visNodes() %>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T),
nodesIdSelection = TRUE)
catfish_nodes <- catfish_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
catfish_edges <- catfish_edges_aggregated %>%
mutate(from = as.character(source),  # Convert source and target columns to character type
to = as.character(target))
visNetwork(nodes = catfish_nodes, edges = catfish_edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(color = list(color = "blue", highlight = "red")) %>%
visNodes() %>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T),
nodesIdSelection = TRUE)
# Extract the matched rows using subsetting
matched_cat <- catfish_edges_aggregated[catfish_edges_aggregated$source %in% MC2_edges$source & catfish_edges_aggregated$target %in% MC2_edges$target, ]
mcatfish_nodes <- matched_cat %>%
mutate(id = as.character(id))  # Convert id column to character type
# Extract the matched rows using subsetting
matched_cat <- catfish_edges_aggregated[catfish_edges_aggregated$source %in% MC2_edges$source & catfish_edges_aggregated$target %in% MC2_edges$target, ]
# Extract unique nodes
mcat_extract <- unique(rbind(matched_cat$source, matched_cat$target))
# Create the network graph using visNetwork
mcat_graph <- visNetwork(nodes = mcat_extract, edges = matched_cat) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(color = list(color = "blue", highlight = "red")) %>%
visNodes(title = names(mcat_extract))
# Extract the matched rows using subsetting
matched_cat <- catfish_edges_aggregated[catfish_edges_aggregated$source %in% MC2_edges$source & catfish_edges_aggregated$target %in% MC2_edges$target, ]
# Extract unique nodes
mcat_extract <- unique(rbind(matched_cat$source, matched_cat$target))
# Create a data frame of nodes
nodes_df <- data.frame(id = mcat_extract)
# Create the network graph using visNetwork
mcat_graph <- visNetwork(nodes = nodes_df, edges = matched_cat) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(color = list(color = "blue", highlight = "red")) %>%
visNodes(title = "id")
# Extract the matched rows using subsetting
matched_cat <- catfish_edges_aggregated[catfish_edges_aggregated$source %in% MC2_edges$source & catfish_edges_aggregated$target %in% MC2_edges$target, ]
# Extract unique nodes
mcat_extract <- unique(rbind(matched_cat$source, matched_cat$target))
# Create a data frame of unique nodes
nodes_df <- data.frame(id = unique(c(matched_cat$source, matched_cat$target)))
# Create the network graph using visNetwork
mcat_graph <- visNetwork(nodes = nodes_df, edges = matched_cat,
width = "100%", height = "400px") %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(color = list(color = "blue", highlight = "red")) %>%
visNodes(title = "id")
# Extract the matched rows using subsetting
matched_cat <- catfish_edges_aggregated[catfish_edges_aggregated$source %in% MC2_edges$source & catfish_edges_aggregated$target %in% MC2_edges$target, ]
# Create a data frame of unique nodes
nodes_df <- data.frame(id = unique(c(matched_cat$source, matched_cat$target)))
# Create the network graph using visNetwork
mcat_graph <- visNetwork(nodes = nodes_df, edges = matched_cat,
width = "100%", height = "400px") %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "to", color = list(color = "blue", highlight = "red"),
fromColumn = "source", toColumn = "target") %>%
visNodes(title = "id")
# Extract the matched rows using subsetting
matched_cat <- catfish_edges_aggregated[catfish_edges_aggregated$source %in% MC2_edges$source & catfish_edges_aggregated$target %in% MC2_edges$target, ]
# Create a data frame of unique nodes
nodes_df <- data.frame(id = unique(c(matched_cat$source, matched_cat$target)))
# Create the network graph using visNetwork
mcat_graph <- visNetwork(nodes = nodes_df, edges = matched_cat,
width = "100%", height = "400px") %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "to", color = list(color = "blue", highlight = "red"),
fromId = "source", toId = "target") %>%
visNodes(title = "id")
# Match the rows from catfish_edges_aggregated with MC2_edges
matched_cat <- catfish_edges_aggregated[
catfish_edges_aggregated$source %in% MC2_edges$source &
catfish_edges_aggregated$target %in% MC2_edges$target,
]
# Create a data frame of unique nodes
nodes_df <- data.frame(id = unique(c(matched_cat$source, matched_cat$target)))
# Create the network graph using visNetwork
mcat_graph <- visNetwork(nodes = nodes_df, edges = matched_cat,
width = "100%", height = "400px") %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "to", color = list(color = "blue", highlight = "red"),
fromId = "source", toId = "target") %>%
visNodes(title = "id")
# Match the rows from catfish_edges_aggregated with MC2_edges
matched_cat <- catfish_edges_aggregated[
catfish_edges_aggregated$source %in% MC2_edges$source &
catfish_edges_aggregated$target %in% MC2_edges$target,
]
# Modify the column names in matched_cat
colnames(matched_cat) <- c("from", "to")
# Create a data frame of unique nodes
nodes_df <- data.frame(id = unique(c(matched_cat$from, matched_cat$to)))
# Create the network graph using visNetwork
mcat_graph <- visNetwork(nodes = nodes_df, edges = matched_cat,
width = "100%", height = "400px") %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
visNodes(title = "id")
# Display the graph
mcat_graph
catfish_nodes <- catfish_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
catfish_edges <- catfish_edges_aggregated %>%
mutate(from = as.character(source),  # Convert source and target columns to character type
to = as.character(target))
visNetwork(nodes = catfish_nodes, edges = catfish_edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
visNodes() %>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T),
nodesIdSelection = TRUE)
# Match the rows from catfish_edges_aggregated with MC2_edges
matched_cat <- catfish_edges_aggregated[
catfish_edges_aggregated$source %in% MC2_edges$source &
catfish_edges_aggregated$target %in% MC2_edges$target,
]
# Modify the column names in matched_cat
colnames(matched_cat) <- c("from", "to")
# Create a data frame of unique nodes
nodes_df <- data.frame(id = unique(c(matched_cat$from, matched_cat$to)))
# Create the network graph using visNetwork
mcat_graph <- visNetwork(nodes = nodes_df, edges = matched_cat,
width = "100%", height = "400px") %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
visNodes(title = "id") %>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T),
nodesIdSelection = TRUE)
# Display the graph
mcat_graph
carp_nodes <- carp_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
carp_edges <- carp_edges_aggregated %>%
mutate(from = as.character(source),  # Convert source and target columns to character type
to = as.character(target))
visNetwork(nodes = carp_nodes, edges = carp_edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
visNodes() %>%
visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
nodesIdSelection = TRUE)
matched_carp <- carp_edges_aggregated[
carp_edges_aggregated$source %in% MC2_edges$source &
carp_edges_aggregated$target %in% MC2_edges$target,
]
colnames(matched_carp) <- c("from", "to")
nodes_df <- data.frame(id = unique(c(matched_carp$from, matched_carp$to)))
mcarp_graph <- visNetwork(nodes = nodes_df, edges = matched_carp,
width = "100%", height = "400px") %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
visNodes(title = "id") %>%
visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
nodesIdSelection = TRUE)
mcarp_graph
cmac_nodes <- cmac_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
cmac_edges <- cmac_edges_aggregated %>%
mutate(from = as.character(source),  # Convert source and target columns to character type
to = as.character(target))
visNetwork(nodes = cmac_nodes, edges = cmac_edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
visNodes() %>%
visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
nodesIdSelection = TRUE)
matched_cmac <- cmac_edges_aggregated[
cmac_edges_aggregated$source %in% MC2_edges$source &
cmac_edges_aggregated$target %in% MC2_edges$target,
]
colnames(matched_cmac) <- c("from", "to")
nodes_df <- data.frame(id = unique(c(matched_cmac$from, matched_cmac$to)))
cmac_graph <- visNetwork(nodes = nodes_df, edges = matched_cmac,
width = "100%", height = "400px") %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
visNodes(title = "id") %>%
visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
nodesIdSelection = TRUE)
cmac_graph
cod_nodes <- cod_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
cod_edges <- cod_edges_aggregated %>%
mutate(from = as.character(source),  # Convert source and target columns to character type
to = as.character(target))
visNetwork(nodes = cod_nodes, edges = cod_edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
visNodes() %>%
visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
nodesIdSelection = TRUE)
matched_cod <- cod_edges_aggregated[
cod_edges_aggregated$source %in% MC2_edges$source &
cod_edges_aggregated$target %in% MC2_edges$target,
]
colnames(matched_cod) <- c("from", "to")
nodes_df <- data.frame(id = unique(c(matched_cod$from, matched_cod$to)))
cod_graph <- visNetwork(nodes = nodes_df, edges = matched_cod,
width = "100%", height = "400px") %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
visNodes(title = "id") %>%
visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
nodesIdSelection = TRUE)
cod_graph
herring_nodes <- herring_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
herring_nodes <- as_tibble(herring$nodes) %>%
select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns
herring_edges <- as_tibble(herring$links) %>%
select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)
# rename columns
herring_edges <- herring_edges %>%
rename('source' = 'source',
'target' = 'target',
'Value_OMU' = 'valueofgoods_omu',
'Weight_KG' = 'weightkg',
'HS_Code' = 'hscode',
'Arrival_Date' = 'arrivaldate')
herring_edges_aggregated <- herring_edges %>%
group_by(source,target, HS_Code) %>%
summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
Count = n(),
Average_OMU = mean(Value_OMU, na.rm = TRUE),
Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
ungroup()
herring_nodes <- herring_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
herring_nodes <- herring_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
herring_nodes <- as_tibble(herring$nodes) %>%
select(id,shpcountry, rcvcountry) #using select function to reorganise into desired order of columns
herring_edges <- as_tibble(herring$links) %>%
select(source, target, valueofgoods_omu, weightkg, hscode, arrivaldate)
# rename columns
herring_edges <- herring_edges %>%
rename('source' = 'source',
'target' = 'target',
'Value_OMU' = 'valueofgoods_omu',
'Weight_KG' = 'weightkg',
'HS_Code' = 'hscode',
'Arrival_Date' = 'arrivaldate')
herring_edges_aggregated <- herring_edges %>%
group_by(source,target, HS_Code) %>%
summarise(Value_OMU_Total = sum(Value_OMU, na.rm = TRUE),
Count = n(),
Average_OMU = mean(Value_OMU, na.rm = TRUE),
Total_Weight_KG = sum(Weight_KG, na.rm = TRUE),
Average_Weight_KG = mean(Weight_KG, na.rm = TRUE)) %>%
ungroup()
catfish_nodes <- catfish_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
catfish_edges <- catfish_edges_aggregated %>%
mutate(from = as.character(source),  # Convert source and target columns to character type
to = as.character(target))
visNetwork(nodes = catfish_nodes, edges = catfish_edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
visNodes() %>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T),
nodesIdSelection = TRUE)
carp_nodes <- carp_nodes_extract %>%
mutate(id = as.character(id))  # Convert id column to character type
carp_edges <- carp_edges_aggregated %>%
mutate(from = as.character(source),  # Convert source and target columns to character type
to = as.character(target))
visNetwork(nodes = carp_nodes, edges = carp_edges) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visEdges(arrows = "to", color = list(color = "blue", highlight = "red")) %>%
visNodes() %>%
visOptions(highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
nodesIdSelection = TRUE)
View(carp_nodes_extract)
pacman::p_load(igraph, tidygraph, ggraph,
visNetwork, lubridate, clock,
tidyverse, graphlayouts, jsonlite)
MC2 <- fromJSON("data/mc2_challenge_graph.json")
